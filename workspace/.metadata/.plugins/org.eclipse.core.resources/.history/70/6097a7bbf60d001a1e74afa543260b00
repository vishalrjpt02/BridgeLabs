/*************************************************************************************
 * @author   Vishal kumar
 * @Version  1.0
 * @purpose  to implement Stack
 * @date     20-11-19
 * @file     Stack.java
 *************************************************************************************/

package com.bridgelabz.Datastructre.base;
public class stack  
{ 
    int top=-1; 
    char items[] = new char[100]; 

    public void push(char x)  
    { 
        if (top == 99)  
        { 
            System.out.println("Stack full"); 
        }  
        else 
        { 
            items[++top] = x; 
        } 
    } 

    public char pop()  
    { 
        if (top == -1)  
        { 
            System.out.println("Underflow error"); 
            return '\0'; 
        }  
        else 
        { 
            char element = items[top]; 
            top--; 
            return element; 
        } 
    } 

    boolean isEmpty()  
    { 
        return (top == -1) ? true : false; 
    } 
  

   





  /*To find out that parrenthesis is balance or not
   * @param  char Array
   * @return true or false
   */

   public boolean isBalanced(char exp[]) 
   { 
	   stack st=new stack(); 
	   for(int i=0;i<exp.length;i++) 
	   { 
		   if (exp[i] == '{' || exp[i] == '(' || exp[i] == '[') 
			   st.push(exp[i]);
		   
		   if (exp[i] == '}' || exp[i] == ')' || exp[i] == ']') 
		   { 
			   if (st.isEmpty()) 
			   { 
				   return false; 
			   } 
			   else if ( !isMatchingPair(st.pop(), exp[i]) ) 
			   { 
				   return false; 
			   } 
		   } 
        
	   } 
	   if (st.isEmpty()) 
		   return true; /*balanced*/
	   else
	   {   /*not balanced*/
		   return false; 
	   }  
   	}  
   
   	public boolean isMatchingPair(char character1, char character2) 
   	{ 
   		if (character1 == '(' && character2 == ')') 
   			return true; 
   		else if (character1 == '{' && character2 == '}') 
   			return true; 
   		else if (character1 == '[' && character2 == ']') 
	   		return true; 
	   	else
	   		return false; 
   } 
}